# Launch EC2: RmmBackend
- name: Launch RmmBackend instance
  amazon.aws.ec2_instance:
    name: "{{ rmm_backend_name }}"
    key_name: "{{ ec2_key }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ ami_id }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ subnet_id }}"
    security_group: "{{ security_group }}"
    tags:
      Role: RmmBackend
  register: rmm_backend_instance

# Launch EC2: Backup
- name: Launch Backup instance
  amazon.aws.ec2_instance:
    name: "{{ backup_name }}"
    key_name: "{{ ec2_key }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ ami_id }}"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ subnet_id }}"
    security_group: "{{ security_group }}"
    tags:
      Role: Backup
  register: backup_instance

- name: Wait for all instances to be running
  retries: 12
  delay: 10
  register: ec2_info
  until: ec2_info.instances | selectattr('state.name', 'equalto', 'running') | list | length == (rmm_backend_instance.instance_ids | length + backup_instance.instance_ids | length)
  amazon.aws.ec2_instance_info:
    instance_ids: "{{ rmm_backend_instance.instance_ids + backup_instance.instance_ids }}"
    region: "{{ aws_region }}"

- name: Set list of running instances
  set_fact:
    running_instances: "{{ ec2_info.instances | selectattr('state.name', 'equalto', 'running') | list }}"

# Write the IPs to a static inventory file
- name: Create inventory file with EC2 hosts
  copy:
    dest: "./generated_inventory.ini"
    content: |
      [docker_hosts]
      {% for host in running_instances %}
      {{ host.public_ip_address }}
      {% endfor %}
  delegate_to: localhost
  run_once: true
  
# Create Target Group
- name: Create target group
  community.aws.elb_target_group:
    name: backend-target-group
    protocol: HTTP
    port: 80
    vpc_id: "{{ vpc_id }}"
    target_type: instance
    health_check_protocol: HTTP
    health_check_path: /
    target_type: instance
    state: present
  register: target_group

# Create ALB with listener embedded
- name: Create application load balancer with listener
  amazon.aws.elb_application_lb:
    name: backend-alb
    subnets: "{{ alb_subnets }}"
    security_groups:
      - "{{ security_group }}"
    scheme: internet-facing
    ip_address_type: ipv4
    state: present
    listeners:
      - Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupArn: "{{ target_group.target_group_arn }}"
  register: alb
- name: Debug instance_ids
  debug:
    var: rmm_backend_instance.instance_ids

- name: Show rmm_backend_instance.instance_ids before registering
  debug:
    var: rmm_backend_instance.instance_ids

# Register RmmBackend instance with target group
- name: Register RmmBackend instance with target group
  community.aws.elb_target:
      target_group_arn: "{{ target_group.target_group_arn }}"
      target_id: "{{ rmm_backend_instance.instance_ids[0] }}"
      target_port: 80
      state: present
      region: "{{ aws_region }}"

# Register Backup instance with target group
- name: Register Backup instance with target group
  community.aws.elb_target:
        target_group_arn: "{{ target_group.target_group_arn }}"
        target_id: "{{ backup_instance.instance_ids[0] }}"

        target_port: 80
        state: present
        region: "{{ aws_region }}"
